generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  admin
  doctor
  patient
}

model User {
  id             String           @id @default(cuid())
  name           String
  email          String           @unique
  phone          String
  dob            DateTime
  role           Role
  password       String
  createdAt      DateTime         @default(now())

  // Relations
  doctorProfile  DoctorProfile?   @relation("UserDoctorProfile")
  patientProfile PatientProfile?  @relation("UserPatientProfile")
}

model DoctorProfile {
  id             String               @id @default(cuid())
  userId         String               @unique
  user           User                 @relation("UserDoctorProfile", fields: [userId], references: [id])
  speciality     String
  degree         String
  createdAt      DateTime             @default(now())

  // Relations
  availabilities DoctorAvailability[]
  appointments   Appointment[]        @relation("DoctorAppointments")
}

model DoctorAvailability {
  id          String        @id @default(cuid())
  doctorId    String
  isRecurring Boolean       @default(false) // true = recurring weekly, false = one-time
  dayOfWeek   Int?          // 0 = Sunday, 1 = Monday, ..., 6 = Saturday (used if recurring)
  date        String?       // <-- nullable now
  startTime   String
  endTime     String
  createdAt   DateTime      @default(now())

  doctor      DoctorProfile @relation(fields: [doctorId], references: [id])
}

model PatientProfile {
  id           String          @id @default(cuid())
  patientId    String          @unique
  userId       String          @unique
  user         User            @relation("UserPatientProfile", fields: [userId], references: [id])
  histories    MedicalHistory[]
  createdAt    DateTime        @default(now())

  // Relations
  appointments Appointment[]   @relation("PatientAppointments")
}

model MedicalHistory {
  id             String         @id @default(cuid())
  patientId      String
  allergies      String?
  pastTreatments String?
  files          String[]       // Array of file URLs
  createdAt      DateTime       @default(now())

  patientProfile PatientProfile @relation(fields: [patientId], references: [patientId])
}

model Appointment {
  id         String          @id @default(cuid())
  doctorId   String
  patientId  String
  startTime  DateTime
  endTime    DateTime
  createdAt  DateTime        @default(now())
  isRead     Boolean         @default(false)
  doctor     DoctorProfile   @relation("DoctorAppointments", fields: [doctorId], references: [id])
  patient    PatientProfile  @relation("PatientAppointments", fields: [patientId], references: [id])
}
